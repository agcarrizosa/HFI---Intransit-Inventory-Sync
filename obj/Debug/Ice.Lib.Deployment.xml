<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ice.Lib.Deployment</name>
    </assembly>
    <members>
        <member name="T:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase">
            <summary>
            The base class for Auto deployment retrievers.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.#ctor(Ice.Lib.Deployment.AutoDeployRetrieverState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase"/> class.
            </summary>
            <param name="retrieverState">Holds the state of the Auto deployment retriever(s).</param>
            <param name="customizationName">Name of the customization.</param>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.CustomizationName">
            <summary>
            Gets the name of the customization.
            </summary>
            <value>
            The name of the customization. <c>null</c> if the core deployment.
            </value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.RetrieverState">
            <summary>
            Gets the retriever state for the current Auto deployment retriever(s).
            </summary>
            <value>
            The state of the retrievers.
            </value>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.GetAssociatedAssemblyNames(System.Reflection.Assembly)">
            <summary>
            Gets the associated assembly file names for the specified assembly.
            </summary>
            <param name="assembly">The assembly to get the associated assembly file names for.</param>
            <returns>The assemblies associated assembly file names.</returns>
            <remarks>
            The associated assembly file names are all the assembly references for the specified assembly as well as any
            assemblies specified in the <see cref="T:Ice.Lib.Deployment.AssociatedDeploymentAssemblyAttribute"/> attributes in the specified assembly.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.GetAssociatedFileNames(System.Reflection.Assembly)">
            <summary>
            Gets the associated file names for the specified assembly.
            </summary>
            <param name="assembly">The assembly to get the associated file names for.</param>
            <returns>The assemblies associated files.</returns>
            <remarks>
            The associated file names are any files specified by the <see cref="T:Ice.Lib.Deployment.AssociatedDeploymentFileAttribute"/> in
            the specified assembly.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.EnsureRequiredFilesAreDeployed">
            <summary>
            Ensures the core manifest files are deployed.
            </summary>
            <remarks>
            Each deployment can have any number of assemblies and/or files that are required. This reads the
            AutoDeployCoreManifest.xml file and ensures any files listed will be downloaded. This is a way of forcing
            assemblies and/or files to download even if they are not specifically retrieved.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.GetDeployedAssemblyOrThrowException(System.String,System.String)">
            <summary>
            Gets the already deployed assembly or throws an exception.
            </summary>
            <param name="localDeployment">The local deployment.</param>
            <param name="assemblyFileName">Name of the assembly file.</param>
            <returns>The deployed assembly.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetrieverBase.TryRetrieveAssociatedAssemblies(System.Reflection.Assembly)">
            <summary>
            Tries to retrieve the associated assemblies.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:Ice.Lib.Deployment.CompositeManifest">
            <summary>
            Collects the <see cref="T:Ice.Lib.Deployment.AutoDeployManifest"/>s so they can be treated like a single instance.
            </summary>
            <remarks>
            Note that it is possible to get deadlocks if multiple instances are running. The odds of this happening are
            extremely low so this was not considered.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.CompositeManifest"/> class.
            </summary>
            <param name="deploymentPath">The deployment path.</param>
        </member>
        <member name="P:Ice.Lib.Deployment.CompositeManifest.DeploymentPath">
            <summary>
            Gets the deployment path.
            </summary>
            <value>
            The deployment path.
            </value>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.BeginUpdate">
            <summary>
            Flags that this manifest will be updated.
            </summary>
            <remarks>
            <see cref="M:Ice.Lib.Deployment.CompositeManifest.EndUpdate"/> must be called before another <see cref="M:Ice.Lib.Deployment.CompositeManifest.BeginUpdate"/> is called.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.CancelUpdate">
            <summary>
            Cancels any updates.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.EndUpdate">
            <summary>
            Ends the associated <see cref="M:Ice.Lib.Deployment.CompositeManifest.BeginUpdate"/>.
            </summary>
            <remarks>
            Any updates are written.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.GetAssemblyState(System.String,System.String)">
            <summary>
            Gets the deployment state of the assembly.
            </summary>
            <param name="customizationName">Name of the customization.</param>
            <param name="fileName">The name of the file.</param>
            <returns>The deployment state of the assembly.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.GetCoreManifestHasBeenDeployed(System.String)">
            <summary>
            Gets whether the core manifest has been deployed.
            </summary>
            <param name="customizationName">Name of the customization.</param>
            <returns><c>true</c> if the core manifest has been deployed.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.GetFileState(System.String,System.String)">
            <summary>
            Gets the <see cref="T:Ice.Lib.Deployment.AutoDeployFileState"/> for the specified file name.
            </summary>
            <value>The <see cref="T:Ice.Lib.Deployment.AutoDeployFileState"/> for the specified file name.</value>
            <returns>The <see cref="T:Ice.Lib.Deployment.AutoDeployFileState"/> for the specified file name.</returns>
            <param name="customizationName">Name of the customization.</param>
            <param name="fileName">The file to get or set the information for.</param>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.SetAssemblyState(System.String,System.String,Ice.Lib.Deployment.AutoDeployAssemblyState)">
            <summary>
            Sets the deployment state of the assembly.
            </summary>
            <param name="customizationName">Name of the customization.</param>
            <param name="fileName">The name of the file.</param>
            <param name="state">The new deployment state.</param>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.SetCoreManifestHasBeenDeployed(System.String,System.Boolean)">
            <summary>
            Sets whether the core manifest has been deployed.
            </summary>
            <param name="customizationName">Name of the customization.</param>
            <param name="deployed"><c>true</c> if the core manifest has been deployed.</param>
        </member>
        <member name="M:Ice.Lib.Deployment.CompositeManifest.SetFileState(System.String,System.String,Ice.Lib.Deployment.AutoDeployFileState)">
            <summary>
            Sets the deployment state of the file.
            </summary>
            <param name="customizationName">Name of the customization.</param>
            <param name="fileName">The name of the file.</param>
            <param name="state">The new deployment state.</param>
            <remarks>
            <para>To set the value, you need to have called <see cref="M:Ice.Lib.Deployment.CompositeManifest.BeginUpdate"/>. When you are done making changes you have
            to call <see cref="M:Ice.Lib.Deployment.CompositeManifest.EndUpdate"/>.</para>
            <para>Setting the value to <see cref="F:Ice.Lib.Deployment.AutoDeployFileState.None"/> will remove the entry from the manifest.</para>
            </remarks>
        </member>
        <member name="T:Ice.Lib.Deployment.NonAutoDeployAssemblyRetriever">
            <summary>
            Retrieves assemblies from non-Auto deployments.
            </summary>
            <remarks>
            If the core deployment type is Auto then have to make sure that files deployed from Zip or XCopy will not be
            overwritten by the core deployment or earlier custom deployments. This class loaded the manifest that was written
            for the non-Auto deployments when they were deployed from AutoUpdate. If one of the assemblies in this custom
            deployment is requested it is returned which keeps the earlier deployments from overwriting it.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.NonAutoDeployAssemblyRetriever.#ctor(Ice.Lib.Deployment.AutoDeployRetrieverState,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AutoDeployAssemblyRetriever"/> class.
            </summary>
            <param name="retrieverState">The retriever state.</param>
            <param name="customizationName">Name of the customization.</param>
        </member>
        <member name="M:Ice.Lib.Deployment.NonAutoDeployAssemblyRetriever.EnsureRequiredFilesAreDeployed">
            <summary>
            Ensures the core manifest files are deployed.
            </summary>
            <remarks>
            This does nothing. All files are already downloaded for this type of retriever.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.NonAutoDeployAssemblyRetriever.RetrieveAssembly(System.String)">
            <summary>
            Retrieves the assembly and all associated assemblies and files.
            </summary>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns>
            The assembly if found, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="T:Ice.Lib.Deployment.AutoDeployRetrieverState">
            <summary>
            Maintains state for the Auto deployment retriever(s).
            </summary>
            <remarks>
            When an assembly is being retrieved, it might cause any number of other assemblies and associated files to be
            retrieved. This class maintains the state needed for this to be used across a number of assembly retrievers.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployRetrieverState.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AutoDeployRetrieverState"/> class.
            </summary>
            <param name="deploymentPath">The deployment path.</param>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployRetrieverState.CompositeAutoRetriever">
            <summary>
            Gets or sets the composite automatic retriever.
            </summary>
            <value>
            The composite automatic retriever.
            </value>
            <remarks>
            <para>When an assembly is being retrieved it is possible that the assembly can have dependent assemblies in other
            deployments. For example a UI assembly could have an adapter as a dependent assembly. The adapter assembly may be
            in an "earlier" deployment. This composite Auto deployment retriever allows the individual retriever to use the
            composite retriever to retrieve the dependent assemblies and files. This allows the dependent assemblies and files
            to be in "earlier" or "later" deployments and still be deployed correctly.</para>
            <para>This property must be set before assemblies with dependent assemblies and/or files are retrieved.</para>
            </remarks>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployRetrieverState.DeploymentPath">
            <summary>
            Gets the deployment path.
            </summary>
            <value>
            The deployment path.
            </value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployRetrieverState.Manifests">
            <summary>
            Gets the <see cref="T:Ice.Lib.Deployment.CompositeManifest"/> to be used by all retrievers.
            </summary>
            <value>
            The <see cref="T:Ice.Lib.Deployment.CompositeManifest"/> to be used by all retrievers.
            </value>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployRetrieverState.BeginRetrieve">
            <summary>
            Begins the retrieve.
            </summary>
            <remarks>
            This must be called before any assembly or associate file retrieve is done.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployRetrieverState.EndRetrieve">
            <summary>
            Ends the retrieve.
            </summary>
            <remarks>
            This must be called once for each <see cref="M:Ice.Lib.Deployment.AutoDeployRetrieverState.BeginRetrieve"/>.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployRetrieverState.ShowDeploymentText(System.String)">
            <summary>
            Shows the deployment text.
            </summary>
            <param name="text">The text to show.</param>
            <remarks>
            The <see cref="T:Ice.Lib.Utilities.WaitDialog"/> is shown if not already shown.
            </remarks>
        </member>
        <member name="T:Ice.Lib.Deployment.AssociatedDeploymentAssemblyAttribute">
            <summary>
            Specifies any additional assemblies that need to be deployed with this assembly.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.AssociatedDeploymentAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AssociatedDeploymentAssemblyAttribute"/> class.
            </summary>
            <param name="fileName">The name of the assembly.</param>
            <remarks>
            If the file is in a sub-directory then specify the relative path, not the full path. For example
            "subdir\Assembly.dll".
            </remarks>
        </member>
        <member name="P:Ice.Lib.Deployment.AssociatedDeploymentAssemblyAttribute.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Ice.Lib.Deployment.AssociatedDeploymentFileAttribute">
            <summary>
            Specifies any additional files that need to be deployed with this assembly.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.AssociatedDeploymentFileAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AssociatedDeploymentFileAttribute"/> class.
            </summary>
            <param name="fileName">The name of the file.</param>
            <remarks>
            If the file is in a sub-directory then specify the relative path, not the full path. For example
            "res\icons\Epicor.ico".
            </remarks>
        </member>
        <member name="P:Ice.Lib.Deployment.AssociatedDeploymentFileAttribute.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Ice.Lib.Deployment.AutoDeployAssemblyRetriever">
            <summary>
            Retrieves assemblies from the local directory if already deployed or downloads them from the deployment server.
            </summary>
            <remarks>
            Uses the <see cref="T:Ice.Lib.Deployment.AutoDeployManifest"/> class to maintain a list of files that are currently deployed. If
            a file is not flagged as deployed, then it will be downloaded even if it is already in the local directory. The
            existing file would be assumed to be from an older release.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetriever.#ctor(Ice.Lib.Deployment.AutoDeployRetrieverState,System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AutoDeployAssemblyRetriever" /> class.
            </summary>
            <param name="retrieverState">The retriever state.</param>
            <param name="serverDeployment">The server deployment directory.</param>
            <param name="customizationName">Name of the customization.</param>
            <remarks>
            Supports the URI scheme's that <see cref="T:Ice.Lib.Utilities.StreamHelperFactory" /> supports.
            </remarks>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployAssemblyRetriever.ServerDeployment">
            <summary>
            Gets the server deployment.
            </summary>
            <value>The server deployment.</value>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetriever.ShouldDeployFile(System.String)">
            <summary>
            Determines if the file should be deployed.
            </summary>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns><c>true</c> if the file should be deployed.</returns>
            <remarks>
            Auto deployment only deploys files in the client directory. Not sub-directories.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetriever.EnsureRequiredFilesAreDeployed">
            <summary>
            Ensures the required assemblies and/or files for this deployment are deployed.
            </summary>
            <remarks>
            Each deployment can have any number of assemblies and/or files that are required. This reads the
            AutoDeployCoreManifest.xml file and ensures any files listed are downloaded. This is a way of forcing
            assemblies and/or files to download even if they are not specifically retrieved.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetriever.RetrieveAssembly(System.String)">
            <summary>
            Retrieves the assembly and all associated assemblies and files.
            </summary>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns>
            The assembly if found, <c>null</c> otherwise.
            </returns>
            <remarks>
            The identifier must be the file name without path of the assembly to retrieve.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployAssemblyRetriever.RetrieveAssociatedFilesWithWaitDialog(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves the list of associated files.
            </summary>
            <param name="associatedFiles">The associated file names.</param>
        </member>
        <member name="T:Ice.Lib.Deployment.AutoDeployAssemblyState">
            <summary>
            Shows the state of a specific auto deployed assembly.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.AutoDeployAssemblyState.None">
            <summary>
            The file hasn't been checked yet.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.AutoDeployAssemblyState.Deployed">
            <summary>
            The file has been deployed.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.AutoDeployAssemblyState.NeedsAssociatedFiles">
            <summary>
            The assembly needs associated files to be deployed with it.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.AutoDeployAssemblyState.NotInDeployment">
            <summary>
            The assembly/file is not in the deployment.
            </summary>
        </member>
        <member name="T:Ice.Lib.Deployment.AutoDeployFileState">
            <summary>
            Shows the state of a specific auto deployed file.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.AutoDeployFileState.None">
            <summary>
            The file hasn't been checked yet.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.AutoDeployFileState.Deployed">
            <summary>
            The file has been deployed.
            </summary>
        </member>
        <member name="F:Ice.Lib.Deployment.AutoDeployFileState.NotInDeployment">
            <summary>
            The file is not in the deployment.
            </summary>
        </member>
        <member name="T:Ice.Lib.Deployment.AutoDeployManifest">
            <summary>
            Holds the collection of files, usually assemblies, that have already been downloaded to the client deployment directory.
            </summary>
            <remarks>
            <para>The AutoDeployManifest.xml file can only be written to by one process at a time. It can be read by any number
            of users. The file is only read when necessary and is read as quickly as possibly. This is both for performance and
            so a writer can get an exclusive lock on it.</para>
            <para>The manifest file name uses the customization name if one is given. For the name "CUST", the manifest
            file name will be AutoDeployManifest_CUST.xml.</para>
            <para>To update the collection, you must call <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.BeginUpdate"/>. After you make your changes you have to
            call <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.EndUpdate"/>. You can call <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.CancelUpdate"/> if you don't want to save your changes.</para>
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AutoDeployManifest"/> class.
            </summary>
            <param name="deploymentPath">The deployment path.</param>
            <param name="customizationName">Name of the customization. This may be <c>null</c> but can't be an empty or empty trimmed string.</param>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Deployment.AutoDeployManifest"/> class.
            </summary>
            <param name="manifestStream">The manifest <see cref="T:System.IO.Stream"/>.</param>
            <remarks>
            The manifest cannot be updated when opened this way.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Ice.Lib.Deployment.AutoDeployManifest"/> class.
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.Changed">
            <summary>
            Gets a value indicating whether changes have been made.
            </summary>
            <value><c>true</c> if changed.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.CoreManifestHasBeenDeployed">
            <summary>
            Gets or sets a value indicating whether the core manifest has been deployed.
            </summary>
            <value><c>true</c> if the core manifest has been deployed.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.Count">
            <summary>
            Gets the number of files in the manifest.
            </summary>
            <value>The number of files in the manifest.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.CustomizationName">
            <summary>
            Gets the name of the customization.
            </summary>
            <value>The name of the customization.</value>
            <remarks>The value is <c>null</c> if this is not a customization.</remarks>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.DeployedAssemblies">
            <summary>
            Gets the list of deployed assemblies.
            </summary>
            <value>The deployed assemblies.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.DeployedFiles">
            <summary>
            Gets the list of deployed files.
            </summary>
            <value>The deployed files.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.DeploymentPath">
            <summary>
            Gets the deployment path.
            </summary>
            <value>The deployment path.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.InUpdate">
            <summary>
            Gets a value indicating whether we are in update mode.
            </summary>
            <value><c>true</c> if we are in update mode.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.LastManifestWriteTimeUtc">
            <summary>
            Gets the last manifest write time in UTC.
            </summary>
            <value>The last manifest write time in UTC.</value>
        </member>
        <member name="P:Ice.Lib.Deployment.AutoDeployManifest.ManifestFileName">
            <summary>
            Gets the name of the manifest file.
            </summary>
            <value>The name of the manifest file.</value>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.BuildManifestFileName(System.String,System.String)">
            <summary>
            Builds the name of the manifest file.
            </summary>
            <param name="deploymentPath">The deployment path.</param>
            <param name="customizationName">Name of the customization.</param>
            <returns>The name of the manifest file.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.BeginUpdate">
            <summary>
            Flags that this manifest will be updated.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if already in update mode.</exception>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.CancelUpdate">
            <summary>
            Cancels the update.
            </summary>
            <remarks>
            The state of this class is reset so it will be forced to reread the manifest next time it is queried.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.Clear">
            <summary>
            Clears the manifest.
            </summary>
            <remarks>
            Must be called after <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.BeginUpdate"/> and before <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.EndUpdate"/>.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            If inside an update (<see cref="M:Ice.Lib.Deployment.AutoDeployManifest.BeginUpdate"/> has been called but <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.EndUpdate"/> hasn't been yet)
            then this will cancel the updates.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.EndUpdate">
            <summary>
            Writes out any changes to the manifest and releases locks.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.GetAssemblyState(System.String)">
            <summary>
            Gets the deployment state of the assembly.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>The deployment state of the assembly.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.GetFileState(System.String)">
            <summary>
            Gets or sets the <see cref="T:Ice.Lib.Deployment.AutoDeployFileState"/> for the specified file name.
            </summary>
            <value>The <see cref="T:Ice.Lib.Deployment.AutoDeployFileState"/> for the specified file name.</value>
            <returns>The <see cref="T:Ice.Lib.Deployment.AutoDeployFileState"/> for the specified file name.</returns>
            <param name="fileName">The file to get or set the information for.</param>
            <remarks>
            <para>To set the value, you need to have called <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.BeginUpdate"/>. When you are done making changes you have
            to call <see cref="M:Ice.Lib.Deployment.AutoDeployManifest.EndUpdate"/>.</para>
            <para>Setting the value to <see cref="F:Ice.Lib.Deployment.AutoDeployFileState.None"/> will remove the entry from the manifest.</para>
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.SetAssemblyState(System.String,Ice.Lib.Deployment.AutoDeployAssemblyState)">
            <summary>
            Sets the deployment state of the assembly.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="state">The new deployment state.</param>
        </member>
        <member name="M:Ice.Lib.Deployment.AutoDeployManifest.SetFileState(System.String,Ice.Lib.Deployment.AutoDeployFileState)">
            <summary>
            Sets the deployment state of the file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="state">The new deployment state.</param>
        </member>
        <member name="T:Ice.Lib.Deployment.MinimalInstallFiles">
            <summary>
            Manages files that are part of a minimal install.
            </summary>
            <remarks>
            <para>There is a subset of files that are required to be able to run our application. These are the minimum files
            needed to be able to download the rest of the application. These files are always loaded whenever the application is
            running and therefore are always locked. There are two cases where these files are important to know.</para>
            <para>The first case is when using the Auto deployment mechanism. Using this mechanism, files are downloaded
            as they are needed instead of all at once before the application runs. Since these minimal files cannot be overwritten,
            the Auto deployment mechanism must skip downloading them and just use the existing files.</para>
            <para>The second case is when running AutoUpdate. These files cannot be deleted when clearing the client director,
            since that could leave the application un-runnable if the update fails. Also, they have to be updated as a group
            since the application would be un-runnable if some were updated and some were not.</para>
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.MinimalInstallFiles.LoadAssembly(System.String,System.String)">
            <summary>
            Loads the existing assembly.
            </summary>
            <param name="deployDirectory">The deploy directory.</param>
            <param name="assemblyIdentifier">The assembly identifier.</param>
            <returns>
            The assembly if it is a minimal install assembly. Otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Ice.Lib.Deployment.MinimalInstallFiles.GetAssemblyFileNames">
            <summary>
            Gets the non-deployable assembly file names.
            </summary>
            <returns>The non-deployable assembly file names.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.MinimalInstallFiles.GetNonAssemblyFileNames">
            <summary>
            Gets the non-deployable non-assembly file names.
            </summary>
            <returns>The non-deployable non-assembly file names.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.MinimalInstallFiles.IsMinimalInstallFile(System.String)">
            <summary>
            Determines whether is a non deployable file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns><c>true</c> if the file is non deployable.</returns>
        </member>
        <member name="T:Ice.Lib.Deployment.ConfigurationUpdater">
            <summary>
            Handles updating the local configuration file.
            </summary>
        </member>
        <member name="M:Ice.Lib.Deployment.ConfigurationUpdater.HandleCorruptConfigurationFile(System.Boolean,System.String,System.Exception)">
            <summary>
            Handles the exception from loading a XML configuration file.
            </summary>
            <param name="isLocal"><c>true</c> if this is the local file.</param>
            <param name="fileName">The name of the configuration file. Only the file's name is used, not the path.</param>
            <param name="exception">The exception from loading the XML.</param>
            <remarks>
            If the file that got the load exception was the configuration file we are running than a
            <see cref="T:System.Configuration.ConfigurationErrorsException"/> is raised. Otherwise, a warning is displayed to the user.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Deployment.ConfigurationUpdater.IsRunningConfigurationFile(System.String)">
            <summary>
            Determines whether the specified file name is the name of the configuration file we are running.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns><c>true</c> if the specified file name is the name of the configuration file we are running.</returns>
        </member>
        <member name="M:Ice.Lib.Deployment.ConfigurationUpdater.UpdateLocalConfigurationXml(System.Xml.XmlDocument,System.IO.Stream,System.String)">
            <summary>
            Updates the local configuration with the data in the specified configuration stream.
            </summary>
            <param name="localConfiguration">The local configuration.</param>
            <param name="configurationStream">The configuration stream.</param>
            <param name="fileName">Name of the file.</param>
            <returns>The updated XML.</returns>
        </member>
        <member name="T:Ice.Lib.Deployment.DeploymentResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.AlreadyInUpdateMode">
            <summary>
              Looks up a localized string similar to The AutoDeployManifist is already in update mode..
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.AssemblyNotFound">
            <summary>
              Looks up a localized string similar to The assembly &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.AutoDeployingFile">
            <summary>
              Looks up a localized string similar to Downloading {0}.
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.ConfigurationFileCorrupt">
             <summary>
               Looks up a localized string similar to The configuration file &apos;{0}&apos; is corrupt:
            {1}.
             </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.DeployedAssemblyMissing">
            <summary>
              Looks up a localized string similar to The assembly {0} was previously deployed but couldn&apos;t be found..
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.LaunchError">
            <summary>
              Looks up a localized string similar to Launch Error.
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.LocalConfigFileCorruptMustFix">
             <summary>
               Looks up a localized string similar to The local configuration file &apos;{0}&apos; is corrupt and must be fixed before running again:
            {1}.
             </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.ManifestFromStreamCannotBeWrittenTo">
            <summary>
              Looks up a localized string similar to The manifest was read from a Stream and therefore cannot be written to..
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.NotInUpdateMode">
            <summary>
              Looks up a localized string similar to The AutoDeployManifest is not in update mode..
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.ServerConfigFileCorrupt">
             <summary>
               Looks up a localized string similar to The server configuration file &apos;{0}&apos; is corrupt:
            {1}.
             </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.ServerConfigFileCorruptMustFix">
             <summary>
               Looks up a localized string similar to The server configuration file &apos;{0}&apos; is corrupt and must be fixed before running again:
            {1}.
             </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.UsupportedUriScheme">
            <summary>
              Looks up a localized string similar to The given path&apos;s format is not supported..
            </summary>
        </member>
        <member name="P:Ice.Lib.Deployment.DeploymentResources.WaitingForManifestFile">
            <summary>
              Looks up a localized string similar to Another user is deploying. Please wait while they finish..
            </summary>
        </member>
        <member name="T:Ice.Lib.CommandArguments">
            <summary>
            Parses the command line.
            </summary>
        </member>
        <member name="F:Ice.Lib.CommandArguments.IgnoreCommandLineCharacters">
            <summary>
            The characters to ignore at the start of a command line argument.
            </summary>
        </member>
        <member name="M:Ice.Lib.CommandArguments.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.CommandArguments"/> class.
            </summary>
            <param name="args">The command line arguments.</param>
        </member>
        <member name="P:Ice.Lib.CommandArguments.Current">
            <summary>
            Gets or sets the current <see cref="T:Ice.Lib.CommandArguments"/>.
            </summary>
            <value>The current <see cref="T:Ice.Lib.CommandArguments"/>.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.Arguments">
            <summary>
            Gets the current arguments.
            </summary>
            <value>
            The current arguments.
            </value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.ConfigurationFileName">
            <summary>
            Gets or sets the configuration file name if one was specified.
            </summary>
            <value>The configuration file name if one was specified.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.ForceUpdate">
            <summary>
            Gets or sets a value indicating whether updates should be done even if the version numbers are the same.
            </summary>
            <value><b>true</b> if updates should be done even if the version numbers are the same.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.LaunchType">
            <summary>
            Gets the <see cref="P:Ice.Lib.CommandArguments.LaunchType"/>.
            </summary>
            <value>The <see cref="P:Ice.Lib.CommandArguments.LaunchType"/>.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.LaunchTypeText">
            <summary>
            Gets the text used on the command line for the launch type.
            </summary>
            <value>The text used on the command line for the launch type.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.Memory">
            <summary>
            Gets a value indicating whether the memory leak dialog should be shown.
            </summary>
            <value><c>true</c> if the memory leak dialog should be shown.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.Optimize">
            <summary>
            Gets a value indicating whether a full optimize should be done.
            </summary>
            <value><b>true</b> if a full optimize should be done.</value>
            <remarks>
            If this is set to <b>true</b> then only the optimize is done, nothing else.
            </remarks>
        </member>
        <member name="P:Ice.Lib.CommandArguments.SkipCheck">
            <summary>
            Gets or sets a value indicating whether version checking should be skipped.
            </summary>
            <value><b>true</b> if version checking should be skipped.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.SubAppId">
            <summary>
            Gets a value indicating what the sub app is in the case we are running a home sub app.
            </summary>
            <value>The sub app id.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.LayoutId">
            <summary>
            Gets a value indicating what the layout id should be when logging in to kinetic home page.
            </summary>
            <value>The layout id.</value>
        </member>
        <member name="P:Ice.Lib.CommandArguments.Unoptimize">
            <summary>
            Gets a value indicating whether a full unoptimize should be done.
            </summary>
            <value><b>true</b> if a full unoptimize should be done.</value>
            <remarks>
            If this is set to <b>true</b> then only the unoptimize is done, nothing else.
            </remarks>
        </member>
        <member name="M:Ice.Lib.CommandArguments.FindArgument(System.String)">
            <summary>
            Finds the specified argument.
            </summary>
            <param name="argument">The argument.</param>
            <returns>The argument if found, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Ice.Lib.CommandArguments.RebuildCommandLine">
            <summary>
            Rebuilds the command line.
            </summary>
            <returns>The rebuilt command line.</returns>
            <remarks>
            The arguments may have to be rebuilt because they might have been change. Also, the arguments get parsed a
            before they are sent to us. Specifically, double quotes may have been removed.
            </remarks>
        </member>
        <member name="M:Ice.Lib.CommandArguments.IsMatchingArgument(System.String,System.String)">
            <summary>
            Determines whether command line argument matches the specified argument name.
            </summary>
            <param name="argumentName">Name of the command line argument.</param>
            <param name="argumentValue">The argument value to compare to.</param>
            <returns><c>true</c> if the argument matches.</returns>
        </member>
        <member name="M:Ice.Lib.CommandArguments.HandleClassicArgument(System.String[])">
            <summary>
            Handle the /classic
            </summary>
            <param name="argumentParts"></param>
        </member>
        <member name="M:Ice.Lib.CommandArguments.HandleKineticHomeArgument(System.String[])">
            <summary>
            Handle the /kineticHome
            </summary>
            <param name="argumentParts"></param>
        </member>
        <member name="T:Ice.Lib.LaunchMenuDeterminer">
            <summary>
            Determines the menu to launch.
            </summary>
        </member>
        <member name="M:Ice.Lib.LaunchMenuDeterminer.DetermineMenuToLaunch(Ice.Lib.LaunchType,System.Boolean,System.String@,System.String@)">
            <summary>
            Determines the menu to launch.
            </summary>
            <param name="launchType">Type of the launch.</param>
            <param name="isShortcutFile"><c>true</c> if this is a short cut file.</param>
            <param name="assemblyFileName">Name of the menu assembly file.</param>
            <param name="launchClassName">Name of the menu launch class.</param>
        </member>
        <member name="T:Ice.Lib.LaunchType">
            <summary>
            The application launch types.
            </summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.Default">
            <summary>
            Launches the menu based on Launch Sequence Value specified on Command Line – options are /Shell or /Classic
            If no command line option specified, Value specified in the SysConfig Node
            If SysConfig node is missing or Default, Value stored in MenuOption file
            If MenuOption is not present, Load in Windows 8 style.
            </summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.MainMenu">
            <summary>Launches the main menu.</summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.DashBoard">
            <summary>Launches a Dashboard.</summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.MESMenu">
            <summary>Launches the MES menu.</summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.HandHeld">
            <summary>Launches the Handheld menu.</summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.ServiceDesigner">
            <summary>Launches the Service Designer.</summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.Shell">
            <summary>Launches the new WPF based ICE Shell. </summary>
        </member>
        <member name="F:Ice.Lib.LaunchType.KineticHome">
            <summary>Launches the Kinetic Home Page. </summary>
        </member>
        <member name="T:Ice.Lib.Utilities.CheckedMessageBox">
            <summary>
            Shows MessageBox that resizes based on the size of the text and allows the user check the CheckBox if they don't want
            to see the message again.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.CheckedMessageBox.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Ice.Lib.Utilities.CheckedMessageBox"/> class from being created.
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.CheckedMessageBox.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value><c>true</c> if this instance is checked.</value>
        </member>
        <member name="M:Ice.Lib.Utilities.CheckedMessageBox.Show(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Utilities.CheckedMessageBox"/> class.
            </summary>
            <param name="text">The message text.</param>
            <param name="caption">The form caption.</param>
            <returns><c>true</c> if the do not show again check box was checked.</returns>
        </member>
        <member name="F:Ice.Lib.Utilities.CheckedMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.CheckedMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ice.Lib.Utilities.CheckedMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ice.Lib.Utilities.FileStreamHelper">
            <summary>
            A helper class for working with file or UNC streams.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.FileStreamHelper.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Utilities.FileStreamHelper"/> class.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to use.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the <paramref name="uri"/> is not a file uri.</exception>
        </member>
        <member name="P:Ice.Lib.Utilities.FileStreamHelper.CanAskUserForCredentials">
            <summary>
            Gets a value indicating whether this instance can ask user for credentials.
            </summary>
            <value><c>true</c> if this instance can ask user for credentials.</value>
            <remarks>Always <c>true</c>.</remarks>
        </member>
        <member name="P:Ice.Lib.Utilities.FileStreamHelper.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:System.Uri"/> exists.
            </summary>
            <value><c>true</c> if exists.</value>
        </member>
        <member name="M:Ice.Lib.Utilities.FileStreamHelper.AskUserForCredentials">
            <summary>
            Asks the user for credentials.
            </summary>
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if successfull, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> if the user canceled and <see cref="F:System.Windows.Forms.DialogResult.Ignore"/> otherwise.</returns>
            <remarks>
            Before calling this method, you should query <see cref="P:Ice.Lib.Utilities.FileStreamHelper.CanAskUserForCredentials"/>.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.FileStreamHelper.CopyFile(System.String)">
            <summary>
            Copies the file.
            </summary>
            <param name="toFileName">Name of file to copy to.</param>
        </member>
        <member name="M:Ice.Lib.Utilities.FileStreamHelper.IsAccessViolationException(System.Exception)">
            <summary>
            Determines whether the exception was caused by the user not having access.
            </summary>
            <param name="exception">The exception.</param>
            <returns><c>true</c> the exception was caused by the user not having access.</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.FileStreamHelper.IsFileNotFoundException(System.Exception)">
            <summary>
            Determines whether the exception was caused by the file not being found.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c> the exception was caused by the file not being found.</returns>
            <remarks>
            Returns <c>true</c> if the exception is of type <see cref="T:System.IO.FileNotFoundException"/> or <see cref="T:System.IO.DirectoryNotFoundException"/>.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.FileStreamHelper.OpenReadOnlyStream">
            <summary>
            Opens the specified <see cref="T:System.Uri"/> as a read-only stream.
            </summary>
            <returns>The stream if it could be opened.</returns>
            <remarks>
                <para>You must close the <see cref="T:System.IO.Stream"/> when you are done.</para>
                <para>The minimum you can expect from the stream is that you can read it forward only.</para>
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.FileStreamHelper.AddNetworkConnection(System.String)">
            <summary>
            Adds the network connection.
            </summary>
            <param name="path">The file path.</param>
            <returns>
            <see cref="F:System.Windows.Forms.DialogResult.OK"/> if set up network connection. <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> if the
            user canceled. <see cref="F:System.Windows.Forms.DialogResult.Ignore"/> otherwise.
            </returns>
        </member>
        <member name="T:Ice.Lib.Utilities.ProgressIndicator">
            <summary>
            A control that shows text for the action being done as well as an optional progress indicator.
            </summary>
            <remarks>
            <para>This control has three different modes. The first is to show progress as a <see cref="T:System.Windows.Forms.ProgressBar"/>. Set
            <see cref="P:Ice.Lib.Utilities.ProgressIndicator.Maximum"/> to a positive value and <see cref="P:Ice.Lib.Utilities.ProgressIndicator.ShowProgress"/> to <c>true</c> for this mode. The second
            is to show progress as text. Set <see cref="P:Ice.Lib.Utilities.ProgressIndicator.Maximum"/> to -1 and <see cref="P:Ice.Lib.Utilities.ProgressIndicator.ShowProgress"/> to <c>true</c> for this
            mode. You can also set the <see cref="P:Ice.Lib.Utilities.ProgressIndicator.TextProgressFormat"/> to specify how the text is formatted. The third way is
            to not show progress at all. Only the action text is displayed. Set <see cref="P:Ice.Lib.Utilities.ProgressIndicator.ShowProgress"/> to <c>false</c>
            for this mode.</para>
            <para>Use the <see cref="P:System.Windows.Forms.UserControl.AutoSize"/> property to determin if the control should grow to fit the text
            whenever it is changed. Use the <see cref="P:System.Windows.Forms.UserControl.AutoSizeMode"/> property to determine how the control grows.
            Use <see cref="P:Ice.Lib.Utilities.ProgressIndicator.Value"/> and <see cref="P:Ice.Lib.Utilities.ProgressIndicator.Maximum"/> to set the current position, if any.</para>
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.ProgressIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Utilities.ProgressIndicator"/> class.
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.ProgressIndicator.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Ice.Lib.Utilities.ProgressIndicator.ShowProgress">
            <summary>
            Gets or sets a value indicating whether to show progress.
            </summary>
            <value><c>true</c> if progress should be shown.</value>
            <remarks>
            If this value is <c>false</c> then only the current action text is shown.
            </remarks>
        </member>
        <member name="P:Ice.Lib.Utilities.ProgressIndicator.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
            <value>The text associated with this control.</value>
        </member>
        <member name="P:Ice.Lib.Utilities.ProgressIndicator.TextProgressFormat">
            <summary>
            Gets or sets the format to use when showing progress as text.
            </summary>
            <value>The text progress format.</value>
            <remarks>
            The value should be format used in a <c>string.Format</c> call. There should be one replacable parameter that
            will get replaced with the <see cref="P:Ice.Lib.Utilities.ProgressIndicator.Value"/> property converted to a string. The default is "{0}".
            </remarks>
        </member>
        <member name="P:Ice.Lib.Utilities.ProgressIndicator.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
            <remarks>
            The value must be less than the <see cref="P:Ice.Lib.Utilities.ProgressIndicator.Maximum"/> value.
            </remarks>
        </member>
        <member name="F:Ice.Lib.Utilities.ProgressIndicator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.ProgressIndicator.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ice.Lib.Utilities.ProgressIndicator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ice.Lib.Utilities.RtlAwareMessageBox">
            <summary>
            Displays a message box that can contain text, buttons, and symbols that inform and instruct the user.
            </summary>
            <remarks>
            This simply calls <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> with the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> settings for
            RtlReading and RightAlign set correctly.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.RtlAwareMessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box with specified text, caption, OK button, and no icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.RtlAwareMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.RtlAwareMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, default button, and options.
            </summary>
            <param name="owner">The parent window, if any.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="options">One of the System.Windows.Forms.MessageBoxOptions values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
            <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.</returns>
        </member>
        <member name="T:Ice.Lib.Utilities.StreamHelperBase">
            <summary>
            Helps work with streams from different sources.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/> class.
            </summary>
            <param name="uri">The <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> to use.</param>
        </member>
        <member name="P:Ice.Lib.Utilities.StreamHelperBase.CanAskUserForCredentials">
            <summary>
            Gets a value indicating whether this instance can ask user for credentials.
            </summary>
            <value><c>true</c> if this instance can ask user for credentials.</value>
        </member>
        <member name="P:Ice.Lib.Utilities.StreamHelperBase.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Ice.Lib.Utilities.StreamHelperBase.Exists">
            <summary>
            Gets a value indicating whether this <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> exists.
            </summary>
            <value><c>true</c> if exists.</value>
        </member>
        <member name="P:Ice.Lib.Utilities.StreamHelperBase.Uri">
            <summary>
            Gets the <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/>.
            </summary>
            <value>The <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> to use.</value>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.BuildUri(System.String,System.String)">
            <summary>
            Builds the <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> from the specified parts.
            </summary>
            <param name="baseUri">The base Uri.</param>
            <param name="path">The path.</param>
            <returns>The <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> from the specified parts.</returns>
            <remarks>
            If the <paramref name="baseUri"/> is more than just the host name than the absolute part of the <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/>
            is would be lost if you use <c>new Uri(uri, string)</c>. For example 'http://epicor/ServerDirectory' for a
            URL and 'myFileName.txt' for a path would produce 'http://epicor/myFileName.txt', losing the 'ServerDirectory'
            part. This method correctly builds the Uri of 'http://epicor/ServerDirectory/myFileName.txt'.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.BuildUri(System.Uri,System.String)">
            <summary>
            Builds the <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> from the specified parts.
            </summary>
            <param name="baseUri">The base <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/>.</param>
            <param name="path">The path.</param>
            <returns>The <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> from the specified parts.</returns>
            <remarks>
            If the <paramref name="baseUri"/> is more than just the host name than the absolute part of the <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/>
            is would be lost if you use <c>new Uri(uri, string)</c>. For example 'http://epicor/ServerDirectory' for a
            URL and 'myFileName.txt' for a path would produce 'http://epicor/myFileName.txt', losing the 'ServerDirectory'
            part. This method correctly builds the Uri of 'http://epicor/ServerDirectory/myFileName.txt'.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.CopyFile(System.String,System.String)">
            <summary>
            Copies the file using the appropriate <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/>.
            </summary>
            <param name="fromPath">Copy from path.</param>
            <param name="toPath">Copy to path.</param>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.AskUserForCredentials">
            <summary>
            Asks the user for credentials.
            </summary>
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if successful, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> if the user canceled and <see cref="F:System.Windows.Forms.DialogResult.Ignore"/> otherwise.</returns>
            <remarks>
            Before calling this method, you should query <see cref="P:Ice.Lib.Utilities.StreamHelperBase.CanAskUserForCredentials"/>.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.CopyFile(System.String)">
            <summary>
            Copies the file.
            </summary>
            <param name="toFileName">Name of file to copy to.</param>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.IsAccessViolationException(System.Exception)">
            <summary>
            Determines whether the exception was caused by the user not having access.
            </summary>
            <param name="exception">The exception.</param>
            <returns><c>true</c> the exception was caused by the user not having access.</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.IsFileNotFoundException(System.Exception)">
            <summary>
            Determines whether the exception was caused by the file not being found.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c> the exception was caused by the file not being found.</returns>
            <remarks>
            Different file stream helpers throw different exceptions. For the file system you do get the
            <see cref="T:System.IO.FileNotFoundException"/> but for web you get <see cref="T:System.Net.WebException"/>s.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.OpenReadOnlyStream">
            <summary>
            Opens the specified <see cref="P:Ice.Lib.Utilities.StreamHelperBase.Uri"/> as a read-only stream.
            </summary>
            <returns>The stream if it could be opened.</returns>
            <remarks>
                <para>You must close the <see cref="T:System.IO.Stream"/> when you are done.</para>
                <para>The minimum you can expect from the stream is that you can read it forward only.</para>
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.OpenReadOnlyStream(System.Int32,System.Boolean)">
            <summary>
            Opens the read only stream.
            </summary>
            <param name="millisecondsForWaitingDialog">The number of milliseconds before showing the waiting dialog.</param>
            <param name="askForCredentialsIfNeeded">If <c>true</c> then ask for credentials if needed.</param>
            <returns>The stream if it could be opened. <c>null</c> if the user canceled or credentials couldn't</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperBase.CopyFile(System.String,System.Action{System.String})">
            <summary>
            Copies the file to a temporary file and overwrites the specified file if successful.
            </summary>
            <param name="toFileName">Name of the file to copy to.</param>
            <param name="copyFileAction">The action the copies a file.</param>
        </member>
        <member name="T:Ice.Lib.Utilities.StreamHelperFactory">
            <summary>
            This is a utility class that helps creates <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/> classes.
            </summary>
            <remarks>
            Use the <see cref="M:Ice.Lib.Utilities.StreamHelperFactory.Create(System.Uri)"/> method to create the appropriate <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/> for the
            specified <see cref="T:System.Uri"/>.
            </remarks>
        </member>
        <member name="T:Ice.Lib.Utilities.StreamHelperFactory.StreamHelperCreator">
            <summary>
            Creates a <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to use.</param>
            <returns>The <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/> to use.</returns>
        </member>
        <member name="P:Ice.Lib.Utilities.StreamHelperFactory.StreamHelpers">
            <summary>
            Gets the collection of <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/>s.
            </summary>
            <value>The stream helper collection.</value>
            <remarks>
            This is used by the <see cref="M:Ice.Lib.Utilities.StreamHelperFactory.Create(System.Uri)"/> method to determine which <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/> to use.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperFactory.Create(System.Uri)">
            <summary>
            Creates a <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/> based on the <see cref="T:System.Uri"/> specified.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to use.</param>
            <returns>A <see cref="T:Ice.Lib.Utilities.StreamHelperBase"/> based on the <see cref="T:System.Uri"/> specified.</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.StreamHelperFactory.IsSupportedScheme(System.String)">
            <summary>
            Determines whether scheme is supported.
            </summary>
            <param name="scheme">The scheme to check.</param>
            <returns><c>true</c> if the scheme is supported.</returns>
        </member>
        <member name="T:Ice.Lib.Utilities.UtilitiesResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.AskCredentialsNotSupported">
            <summary>
              Looks up a localized string similar to Asking the user for credentials is not supported..
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.TestingForExistanceIsNotSupported">
            <summary>
              Looks up a localized string similar to Testing for Uri existance is not supported..
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.UriNotSupported">
            <summary>
              Looks up a localized string similar to The given path&apos;s format is not supported..
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.UsupportedUriScheme">
            <summary>
              Looks up a localized string similar to The given path&apos;s format is not supported..
            </summary>
        </member>
        <member name="P:Ice.Lib.Utilities.UtilitiesResources.WaitingMessage">
            <summary>
              Looks up a localized string similar to Working....
            </summary>
        </member>
        <member name="T:Ice.Lib.Utilities.WaitDialog">
            <summary>
            A "waiting" dialog form that is shown if a specific task doesn't complete in a specified amount of time.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitDialog.#ctor(System.Threading.EventWaitHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Utilities.WaitDialog"/> class.
            </summary>
            <param name="waitHandle">The wait handle.</param>
            <remarks>
            If <paramref name="waitHandle"/> is <c>null</c> then there is no cancel button and the user can't cancel the
            action. In this mode, you have to close the form yourself. If you want to allow the user to cancel then use
            one the <see cref="M:Ice.Lib.Utilities.WaitDialog.DoAction(System.Int32,System.Action{Ice.Lib.Utilities.WaitDialog.QueryCancel})"/> method.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Utilities.WaitDialog"/> class.
            </summary>
        </member>
        <member name="T:Ice.Lib.Utilities.WaitDialog.CreateWaitDialog">
            <summary>
            Creates the wait form.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.EventWaitHandle"/> to use.</param>
            <returns>The wait form that was created.</returns>
        </member>
        <member name="T:Ice.Lib.Utilities.WaitDialog.QueryCancel">
            <summary>
            A delegate used to query if the action has been canceled or not.
            </summary>
            <returns><c>true</c> if the action has been canceled.</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitDialog.DoAction(System.Int32,System.Action{Ice.Lib.Utilities.WaitDialog.QueryCancel})">
            <summary>
            Does the action and shows the waiting dialog if it doesn't complete in the specified time.
            </summary>
            <param name="millisecondsBeforeDialog">How many milliseconds to wait before showing the waiting dialog.</param>
            <param name="action">The action to do.</param>
            <returns><c>true</c> if the action completed. <c>false</c> if the action was canceled.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown if the action caused an exception.</exception>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitDialog.DoAction(System.Int32,System.Action{Ice.Lib.Utilities.WaitDialog.QueryCancel},Ice.Lib.Utilities.WaitDialog.CreateWaitDialog)">
            <summary>
            Does the action and shows the waiting dialog if it doesn't complete in the specified time.
            </summary>
            <param name="millisecondsBeforeDialog">How many milliseconds to wait before showing the waiting dialog.</param>
            <param name="action">The action to do.</param>
            <param name="dialogCreator">Called to create the wait dialog if it is needed.</param>
            <returns><c>true</c> if the action completed. <c>false</c> if the action was canceled.</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">Thrown if the action caused an exception.</exception>
            <remarks>
            If the <paramref name="dialogCreator"/> throws an exception, it is not handled here.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitDialog.UpdateText(System.String)">
            <summary>
            Updates the UI text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="F:Ice.Lib.Utilities.WaitDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ice.Lib.Utilities.WaitHandleHelper">
            <summary>
            A helper utility for working with <see cref="T:System.Threading.WaitHandle"/>s.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitHandleHelper.DoAction(System.Threading.WaitHandle,System.Windows.Forms.MethodInvoker,Ice.Lib.Utilities.WaitDialog.QueryCancel,System.Windows.Forms.MethodInvoker)">
            <summary>
            Does the action while locking on the specified <see cref="T:System.Threading.WaitHandle"/>.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.WaitHandle"/> to use.</param>
            <param name="action">The action to do.</param>
            <param name="queryCancel">A function that returns if the action has been canceled.</param>
            <param name="releaseWaitHandle">The action to release the wait handle.</param>
            <returns><c>true</c> if the action was run.</returns>
            <remarks>
            This method waits for the specified handle to be "set" or to have "ownership" of it. At that point the specified
            action is run. After the action is run, the <paramref name="releaseWaitHandle"/> is run to clean up the wait
            handle. This is necessary because different wait handles are released in different ways. See if there is an
            override of this method for that wait handle type. If the <paramref name="queryCancel"/> function returns
            <c>true</c> before we "own" the wait handle then this method returns without running the action and without
            running the <paramref name="releaseWaitHandle"/> action.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitHandleHelper.DoAction(System.Threading.EventWaitHandle,System.Windows.Forms.MethodInvoker,Ice.Lib.Utilities.WaitDialog.QueryCancel)">
            <summary>
            Does the action while locking on the specified <see cref="T:System.Threading.EventWaitHandle"/>.
            </summary>
            <param name="waitHandle">The <see cref="T:System.Threading.EventWaitHandle"/> to use.</param>
            <param name="action">The action to do.</param>
            <param name="queryCancel">A function that returns if the action has been canceled.</param>
            <returns><c>true</c> if the action was run.</returns>
            <remarks>
            This method waits to have ownership of the specified <see cref="T:System.Threading.EventWaitHandle"/>. At that point the specified
            action is run. After the action is run, the <see cref="T:System.Threading.EventWaitHandle"/> is released. If the
            <paramref name="queryCancel"/> function returns <c>true</c> before we own the <see cref="T:System.Threading.EventWaitHandle"/>
            then this method returns without running the action.
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.WaitHandleHelper.DoAction(System.Threading.Mutex,System.Windows.Forms.MethodInvoker,Ice.Lib.Utilities.WaitDialog.QueryCancel)">
            <summary>
            Does the action while locking on the specified <see cref="T:System.Threading.Mutex"/>.
            </summary>
            <param name="mutex">The <see cref="T:System.Threading.Mutex"/> to use.</param>
            <param name="action">The action to do.</param>
            <param name="queryCancel">A function that returns if the action has been canceled.</param>
            <returns><c>true</c> if the action was run.</returns>
            <remarks>
            This method waits to have ownership of the specified <see cref="T:System.Threading.Mutex"/>. At that point the specified
            action is run. After the action is run, the <see cref="T:System.Threading.Mutex"/> is released. If the <paramref name="queryCancel"/>
            function returns <c>true</c> before we own the <see cref="T:System.Threading.Mutex"/> then this method returns without running the
            action.
            </remarks>
        </member>
        <member name="T:Ice.Lib.Utilities.WebStreamHelper">
            <summary>
            A helper class for working with http streams.
            </summary>
        </member>
        <member name="M:Ice.Lib.Utilities.WebStreamHelper.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Ice.Lib.Utilities.WebStreamHelper"/> class.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> work with.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the <paramref name="uri"/> is not a ftp or http uri.</exception>
        </member>
        <member name="P:Ice.Lib.Utilities.WebStreamHelper.CanAskUserForCredentials">
            <summary>
            Gets a value indicating whether this instance can ask user for credentials.
            </summary>
            <value><c>true</c> if this instance can ask user for credentials.</value>
            <remarks>Always <c>false</c>.</remarks>
        </member>
        <member name="P:Ice.Lib.Utilities.WebStreamHelper.Exists">
            <summary>
            Not supported.
            </summary>
            <value><c>true</c> if exists.</value>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Ice.Lib.Utilities.WebStreamHelper.AskUserForCredentials">
            <summary>
            Not supported.
            </summary>
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if successfull, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> if the user canceled and <see cref="F:System.Windows.Forms.DialogResult.Ignore"/> otherwise.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Ice.Lib.Utilities.WebStreamHelper.CopyFile(System.String)">
            <summary>
            Copies the file.
            </summary>
            <param name="toFileName">Name of file to copy to.</param>
        </member>
        <member name="M:Ice.Lib.Utilities.WebStreamHelper.IsAccessViolationException(System.Exception)">
            <summary>
            Determines whether the exception was caused by the user not having access.
            </summary>
            <param name="exception">The exception.</param>
            <returns><c>true</c> the exception was caused by the user not having access.</returns>
        </member>
        <member name="M:Ice.Lib.Utilities.WebStreamHelper.IsFileNotFoundException(System.Exception)">
            <summary>
            Determines whether the exception was caused by the file not being found.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns><c>true</c> the exception was caused by the file not being found.</returns>
            <remarks>
            Returns <c>true</c> if the exception is of type <see cref="T:System.Net.WebException"/> and...
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.WebStreamHelper.OpenReadOnlyStream">
            <summary>
            Opens the specified <see cref="T:System.Uri"/> as a read-only stream.
            </summary>
            <returns>The stream if it could be opened.</returns>
            <remarks>
                <para>You must close the <see cref="T:System.IO.Stream"/> when you are done.</para>
                <para>The minimum you can expect from the stream is that you can read it forward only.</para>
            </remarks>
        </member>
        <member name="M:Ice.Lib.Utilities.WebStreamHelper.WebResourceExists(System.Uri)">
            <summary>
            Checks whether a given web resource is at the location
            </summary>
            <param name="resource">URI of the resource</param>
            <returns>True if the resource exists; False otherwise</returns>
        </member>
        <member name="T:Ice.Lib.WellKnownAssemblyRetrievers">
            <summary>
            Holds well known assembly retrievers.
            </summary>
        </member>
        <member name="P:Ice.Lib.WellKnownAssemblyRetrievers.AutoDeployAssemblyRetriever">
            <summary>
            Gets or sets the <see cref="T:Ice.Lib.Deployment.IAssemblyRetriever"/> that handles retrieving assemblies as they are needed.
            </summary>
            <value>The <see cref="T:Ice.Lib.Deployment.IAssemblyRetriever"/> that handles retrieving assemblies as they are needed.</value>
            <remarks>
            This properties value will be <c>null</c> if auto deployment isn't turned on. If auto deployment is turned on
            for a single deployment or customization then the value will be a
            <see cref="P:Ice.Lib.WellKnownAssemblyRetrievers.AutoDeployAssemblyRetriever"/>. If it is turned on for multiple deployments
            then it will be a <see cref="T:Ice.Lib.Deployment.CompositeAssemblyRetriever"/>.
            </remarks>
        </member>
        <member name="P:Ice.Lib.WellKnownAssemblyRetrievers.SessionlessAssemblyRetriever">
            <summary>
            Gets or sets the <see cref="T:Ice.Lib.Deployment.IAssemblyRetriever"/> to use to retrieve assemblies not associated with a specific session.
            </summary>
            <value>The session less assembly retriever.</value>
            <remarks>
            When there is no session or the retrieving is done without a session the <see cref="T:Ice.Lib.Deployment.CompositeAssemblyRetriever"/>
            should be used. If the Ice.UI.EpiClientLib.dll assembly has been loaded already then you should use
            the <c>ClientAssemblyRetriever</c> specifying a <c>null</c> session instead.
            </remarks>
        </member>
    </members>
</doc>
